using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using RAMSDB.Data;
using RAMSDBModel;


namespace RAMSDB_WinForms.Administration
{ 
    public partial class UserAdmin : Form
    {
       

        public UserAdmin()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            RAMSDBModel.RAMSDBEntities dbContext = new RAMSDBModel.RAMSDBEntities();



            var urc = dbContext.UnpavedRoadConditionSurvey.ToList() ;

           




            //var d = from u in urc
            //        group u by new { u.RCSYear, u.RoadID } into y
            //        select new
            //        {
            //            y.Key.RCSYear,
            //            y.Key.RoadID,
            //            WeightedSurfaceCondition = y.WeightedAverage(x => (double)x.SurfaceCondition.GetValueOrDefault(), x => (double)x.SectionLengthKM.GetValueOrDefault()),
            //            WeightedShoulderCondition = (y.WeightedAverage(x => (double)x.ShoulderConditionLeft.GetValueOrDefault(), x => (double)x.SectionLengthKM.GetValueOrDefault())
            //                                        + y.WeightedAverage(x => (double)x.ShoulderConditionRight.GetValueOrDefault(), x => (double)x.SectionLengthKM.GetValueOrDefault()))/2,

            //            WeightedDrainageCondition = (y.WeightedAverage(x => (double)x.DrainageConditionLeft.GetValueOrDefault(), x => (double)x.SectionLengthKM.GetValueOrDefault())
            //                                        + y.WeightedAverage(x => (double)x.DrainageConditionRight.GetValueOrDefault(), x => (double)x.SectionLengthKM.GetValueOrDefault()))/2,

            //           MaintenanceConditionIndex = ((y.WeightedAverage(x => (double)x.SurfaceCondition.GetValueOrDefault(), x => (double)x.SectionLengthKM.GetValueOrDefault())) *0.4) 
            //                                        + (((y.WeightedAverage(x => (double)x.ShoulderConditionLeft.GetValueOrDefault(), x => (double)x.SectionLengthKM.GetValueOrDefault())
            //                                                + y.WeightedAverage(x => (double)x.ShoulderConditionRight.GetValueOrDefault(), x => (double)x.SectionLengthKM.GetValueOrDefault())) / 2) *0.2) 
            //                                        +(((y.WeightedAverage(x => (double)x.DrainageConditionLeft.GetValueOrDefault(), x => (double)x.SectionLengthKM.GetValueOrDefault())
            //                                                + y.WeightedAverage(x => (double)x.DrainageConditionRight.GetValueOrDefault(), x => (double)x.SectionLengthKM.GetValueOrDefault())) / 2) *0.4)
            //        };



            var firstPhase = from u in urc
                    select new
                    {
                        u.RCSID,
                        u.RCSYear,
                        u.RoadID,
                      
                        u.SectionLengthKM,
                        SurfaceConditionFactor = u.SurfaceCondition,
                       

                        ShoulderConditionFactor = (u.ShoulderConditionRight.HasValue ? 1 : 0) + (u.ShoulderConditionLeft.HasValue ? 1 : 0) == 0 ? 0 :

                                                (double)((u.ShoulderConditionRight.GetValueOrDefault() + u.ShoulderConditionLeft.GetValueOrDefault()) /
                                                    (
                                                      (double)((u.ShoulderConditionRight.HasValue ? 1 : 0) + (u.ShoulderConditionLeft.HasValue ? 1 : 0))
                                                    )),



                        DrainageConditionFactor = (u.DrainageConditionRight.HasValue ? 1 : 0) + (u.DrainageConditionLeft.HasValue ? 1 : 0) == 0 ? 0 :

                                                          (double)((u.DrainageConditionRight.GetValueOrDefault() + u.DrainageConditionLeft.GetValueOrDefault()) /
                                                              (
                                                                (double)((u.DrainageConditionRight.HasValue ? 1 : 0) + (u.DrainageConditionLeft.HasValue ? 1 : 0))
                                                              ))


                    }
                    ;


            var secondPhase = (from u in firstPhase
                              select new
                              {
                                  u.RCSID,
                                  u.RCSYear,
                                  u.RoadID,
                                  u.SectionLengthKM,
                                  u.SurfaceConditionFactor,
                                  u.ShoulderConditionFactor,
                                  u.DrainageConditionFactor,
                                  MaintenanceConditionIndex = u.SurfaceConditionFactor * 0.4 + u.ShoulderConditionFactor * 0.2 + u.DrainageConditionFactor * 0.4,

                                  RoutineMaintenance = (u.SurfaceConditionFactor * 0.4 + u.ShoulderConditionFactor * 0.2 + u.DrainageConditionFactor * 0.4) <2.5 ? true : false,
                                  PeriodicMaintenance = (u.SurfaceConditionFactor * 0.4 + u.ShoulderConditionFactor * 0.2 + u.DrainageConditionFactor * 0.4) > 1.5 ?
                                                        (u.SurfaceConditionFactor * 0.4 + u.ShoulderConditionFactor * 0.2 + u.DrainageConditionFactor * 0.4) < 2.5 ? true: false : false,
                                  Rehabilitation = (u.SurfaceConditionFactor * 0.4 + u.ShoulderConditionFactor * 0.2 + u.DrainageConditionFactor * 0.4) >= 2.5 ? true : false
                              });

  

            var trafficCountScore = dbContext.Database.ExecuteSqlCommand("Delete from TentativeRoadMaintenancePlan");// SqlQuery<RAMSDBModel.>("TrafficScoreCalculation").ToList();



         

             List<RAMSDBModel.TentativeRoadMaintenancePlan> tplan = dbContext.TentativeRoadMaintenancePlan.ToList();



            foreach (var roadSegment in secondPhase)
            {


              
                
                if (roadSegment.Rehabilitation)
                {
                    RAMSDBModel.TentativeRoadMaintenancePlan tp = new RAMSDBModel.TentativeRoadMaintenancePlan();
                    tp.RCSID = roadSegment.RCSID;
                    tp.RoadID = roadSegment.RoadID;
                    tp.Year = roadSegment.RCSYear;
                    tp.CatWorkID = 5;
                    tp.Length = roadSegment.SectionLengthKM.GetValueOrDefault();


                    tplan.Add(tp);

              
                   
                   

                }

                if (roadSegment.RoutineMaintenance)
                {
                    RAMSDBModel.TentativeRoadMaintenancePlan tp = new RAMSDBModel.TentativeRoadMaintenancePlan();
                    tp.RCSID = roadSegment.RCSID;
                    tp.RoadID = roadSegment.RoadID;
                    tp.Year = roadSegment.RCSYear;
                    tp.CatWorkID = 1;
                    tp.Length = roadSegment.SectionLengthKM.GetValueOrDefault();

                    tplan.Add(tp);

                  



                }

                if (roadSegment.PeriodicMaintenance)
                {
                    RAMSDBModel.TentativeRoadMaintenancePlan tp = new RAMSDBModel.TentativeRoadMaintenancePlan();
                    tp.RCSID = roadSegment.RCSID;
                    tp.RoadID = roadSegment.RoadID;
                    tp.Year = roadSegment.RCSYear;
                    tp.CatWorkID = 2;
                    tp.Length = roadSegment.SectionLengthKM.GetValueOrDefault();

                    tplan.Add(tp);




                }
            }



            dbContext.TentativeRoadMaintenancePlan.AddRange(tplan);
            dbContext.SaveChanges();
            


            gridControl2.DataSource = secondPhase.ToList();

        


        }

    


    }

   
}
