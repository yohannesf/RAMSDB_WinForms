using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraBars;
using System.Data.Entity;
using RAMSDBModel;
using RAMSDB.Data;
using DevExpress.XtraCharts;

using DevExpress.XtraMap;
using DevExpress.Utils;

namespace RAMSDB_WinForms
{
    public partial class MapViewer : DevExpress.XtraBars.Ribbon.RibbonForm
    {

        Font toolTipFont;

        Font ToolTipFont
        {
            get
            {
                if (toolTipFont == null)
                    toolTipFont = new Font(AppearanceObject.DefaultFont.FontFamily, 12, FontStyle.Bold);
                return toolTipFont;
            }
        }

        List<RoadsPerUser> roadsPerUser = new List<RoadsPerUser>();
        RAMSDBDataLoader dataLoader = new RAMSDBDataLoader();
       
        List<int> roads = new List<int>();
        List<int> adminIDs = new List<int>();
        List<RoadsGISData> rGIS = new List<RoadsGISData>();
        List<AdminBoundary> aBoundary = new List<AdminBoundary>();
        RAMSDBEntities _context = new RAMSDBEntities();
        //const string roadSurfaceTypeAttrName = "SurfaceType";
        //const string roadClassificationAttrName = "RoadClassification";
        SqlGeometryItemStorage roadGeomItemStorage = new SqlGeometryItemStorage { SourceCoordinateSystem = new CartesianSourceCoordinateSystem() };
        SqlGeometryItemStorage woredasGeomItemStorage = new SqlGeometryItemStorage { SourceCoordinateSystem = new CartesianSourceCoordinateSystem() };

        //ItemsLayerLegend Legend
        //{
        //    get { return mapControl1.Legends.Count > 0 ? (ItemsLayerLegend)mapControl1.Legends[0] : null; }
        //    set
        //    {
        //        if (mapControl1.Legends.Count > 0)
        //            mapControl1.Legends.RemoveAt(0);
        //        if (value != null)
        //            mapControl1.Legends.Add(value);
        //    }
        //}


        //  public override MapControl MapControl  { get { return mapControl1; } }

        

        public  MapViewer()
        {

            
           

            InitializeComponent();
           
           

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            RAMSDBModel.RAMSDBEntities dbContext = new RAMSDBModel.RAMSDBEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            roadsPerUser = dataLoader.roadsPerUserDL;

            rGIS = dataLoader.roadsPerUserDL.Select(x => x.RoadsGISData).ToList();
            //  rGIS = _context.RoadsGISData.ToList();
            aBoundary =  dataLoader.roadsPerUserDL.Select(x => x.AdminBoundary).ToList();





          

            foreach (var row in rGIS)
            {
                SqlGeometryItem geometryItem = new SqlGeometryItem();

                geometryItem.WktString = row.Shape.AsText();
                geometryItem.Srid = 4326;

                // MapItemAttributeCollection mapItemAttributes = new MapItemAttributeCollection();


                geometryItem.Attributes.Add(new MapItemAttribute()
                {  Name = "SurfaceType", Type = typeof(string), Value = row.RoadSurfaceType.SurfaceTypeName.ToString() });

                geometryItem.Attributes.Add(new MapItemAttribute()
                {  Name = "RoadClassification", Type = typeof(string), Value = row.RoadClassification.RoadClassificationDescription });

                geometryItem.Attributes.Add(new MapItemAttribute()
                { Name = "RoadName", Type = typeof(string), Value = row.RoadOriginDestination });


                //mapItemAttributes.Add()


                //MapItemAttribute mapAttributes = new MapItemAttribute();
                //mapAttributes.Name = roadNameAttrName;
                //mapAttributes.Value = row.RoadSurfaceType.SurfaceTypeName;// records[0][0];

                //  geometryItem.Attributes.Add(mapAttributes);

                //MapItemAttribute mapAttributes2 = new MapItemAttribute();
                //mapAttributes2.Name = "RoadClassfication";
                //mapAttributes2.Value = row.RoadClassification.RoadClassificationDescription;// records[0][0];

                //geometryItem.Attributes.Add(mapAttributes2);

                roadGeomItemStorage.Items.Add(geometryItem);
                
            }

            foreach (var row in aBoundary)
            {
                SqlGeometryItem geometryItem = new SqlGeometryItem();

                geometryItem.WktString = row.Shape.AsText();
                geometryItem.Srid = 4326;

                MapItemAttribute mapAttributes = new MapItemAttribute();
                mapAttributes.Name = "Woreda";
                mapAttributes.Value = row.WoredaName;// records[0][0];

                geometryItem.Attributes.Add(mapAttributes);
                woredasGeomItemStorage.Items.Add(geometryItem);
            }






            //VectorItemsLayer itemsLayer = new VectorItemsLayer()
            //{
            //    Data = roadGeomItemStorage,
            //    Colorizer = CreateColorizer()
            //    //  Col
            //}
            //;

            //itemsLayer.Data = geomItemStorage;
            layerWoreda.Data = woredasGeomItemStorage;
          
            layerRoads.Data = roadGeomItemStorage;

           
            

       //  layerRoads.Colorizer = CreateColorizer();
            mapControl1.Layers.Add(layerRoads);
            mapControl1.Layers.Add(layerWoreda);


            

            //mapControl1.Legends.Add(new ColorListLegend()
            //{
            //    RangeStopsFormat = "0,,M",
            //    Header = "Room Type",
            //    Layer = layerRoads,
               


            //});



          layerRoads.DataLoaded += layer_DataLoaded;

            //    
            //  this.mapControl1.Layers.Add(itemsLayer);
            // this.mapControl1.Layers.Add(layerRoads);


            // new CustomColorizer();

            mapControl1.ZoomToFitLayerItems();//.ZoomToFitLayerItems();
            mapControl1.Focus();
            //   this.mapControl1.ZoomToFitLayerItems();
            //this.mapControl1.Focus();


            // This line of code is generated by Data Source Configuration Wizard



        }

        void layer_DataLoaded(object sender, DataLoadedEventArgs e)
        {
            //  mapControl1.ZoomToFitLayerItems(0.4);
            //   SurfaceTypeColorizer();
            chkSurfaceType.Checked = true;
            // RoadClassColorizer();
            //  CreatePopulationLegend();
            // layerRoads.Colorizer = CreateColorizer();
        }

        public void SurfaceTypeColorizer()
        {

            if (mapControl1.Legends.Count > 0)
                mapControl1.Legends.RemoveAt(0);


            //ToolTipTitleItem titleItem1 = new ToolTipTitleItem() { Text = "RoadName"  };
            //titleItem1.Appearance.ForeColor = SystemColors.GrayText;
            //titleItem1.Appearance.Font = ToolTipFont;

            //SuperToolTip superToolTip = new SuperToolTip();
            //superToolTip.Items.Add(titleItem1);

            //ToolTipSeparatorItem sepItem = new ToolTipSeparatorItem();
            //superToolTip.Items.Add(sepItem);

            //ToolTipItem textItem = new ToolTipItem() { Text = e.ToolTip };
            //superToolTip.Items.Add(textItem);
            //e.SuperTip = superToolTip;


           layerRoads.ToolTipPattern = "Surface Type: {SurfaceType} ";
        

            mapControl1.Legends.Add(CreateLegend());
            MapLegendBase CreateLegend()
            {
                ColorListLegend legend = new ColorListLegend()
                {

                    Header = "Surface Types",
                    Alignment = LegendAlignment.TopRight
                };

                legend.CustomItems.Add(new ColorLegendItem()
                { Color = Color.Blue,   Text = "Gravel"  });

                legend.CustomItems.Add(new ColorLegendItem()
                { Color = Color.Green, Text = "Earth" });

                legend.CustomItems.Add(new ColorLegendItem()
                { Color = Color.Gray, Text = "Asphalt" });

                return legend;
            }



           

           

            for (int i=0; i < layerRoads.Data.Items.Count(); i++)
            {
                MapItemAttributeCollection mt = new MapItemAttributeCollection();


               // mt = roadGeomItemStorage.Items[d].Attributes as MapItemAttributeCollection;// roadGeomItemStorage.Items.Select(c => c.Attributes).FirstOrDefault() as MapItemAttributeCollection;

                mt = layerRoads.Data.GetItem(i).Attributes as MapItemAttributeCollection;



                if (mt != null)
                {

                    if ((string)mt["SurfaceType"].Value == "Gravel")
                    {
                        layerRoads.Data.GetItem(i).Stroke = Color.Blue;

                        //  layerRoads.Data.Items.ElementAt(d).Stroke = Color.Blue;

                    }
                    if ((string)mt["SurfaceType"].Value == "Earth")
                    {
                        //  layerRoads.Colorizer.ColorizeElement..GetItemSourceObject(layerRoads.Data.GetItem(d)) = Color.Green;
                        layerRoads.Data.GetItem(i).Stroke = Color.Green;
                    }
                    if ((string)mt["SurfaceType"].Value == "Asphalt")
                    {
                        //   layerRoads.Data.Items.ElementAt(d).Stroke = Color.Gray;
                        layerRoads.Data.GetItem(i).Stroke = Color.Gray;

                    }

                }
                //  MessageBox.Show(d.ToString())
            }


            //foreach (var item in roadGeomItemStorage.Items)
            //{
            //    MapItemAttributeCollection mt = new MapItemAttributeCollection();

                
            //    mt = item.Attributes as MapItemAttributeCollection;// roadGeomItemStorage.Items.Select(c => c.Attributes).FirstOrDefault() as MapItemAttributeCollection;

               
            //    if (mt != null)
            //    {
                                                         
            //        if ((string)mt["SurfaceType"].Value == "Gravel")
            //        {
            //            layerRoads.Data.Items.ElementAt(i).Stroke = Color.Blue;
                        
            //        }
            //        if ((string)mt["SurfaceType"].Value == "Earth")
            //        {
            //            layerRoads.Data.Items.ElementAt(i).Stroke = Color.Green;
            //        }
            //        if ((string)mt["SurfaceType"].Value == "Asphalt")
            //        {
            //            layerRoads.Data.Items.ElementAt(i).Stroke = Color.Gray;

            //        }

            //    }
            //    i++;
            //}


           
            
        }

        public void RoadClassColorizer()
        {

            layerRoads.ToolTipPattern = "Classification: {RoadClassification} ";

            if (mapControl1.Legends.Count > 0)
                mapControl1.Legends.RemoveAt(0);



            mapControl1.Legends.Add(CreateLegend());
            MapLegendBase CreateLegend()
            {
                ColorListLegend legend = new ColorListLegend()
                {

                    Header = "Road Classification",
                    Alignment = LegendAlignment.TopRight,
                    SortOrder = LegendItemsSortOrder.Ascending
                    
                };

                legend.CustomItems.Add(new ColorLegendItem()
                { Color = Color.Blue, Text = "Class A-Trunk Road" });

                legend.CustomItems.Add(new ColorLegendItem()
                { Color = Color.Green, Text = "Class B-Link Road" });

                legend.CustomItems.Add(new ColorLegendItem()
                { Color = Color.Cyan, Text = "Class C-Main Access Road" });

                legend.CustomItems.Add(new ColorLegendItem()
                { Color = Color.DarkRed, Text = "Class D-Collector Road" });

                legend.CustomItems.Add(new ColorLegendItem()
                { Color = Color.Purple, Text = "Class E-Feeder Road" });

                return legend;
            }


            for (int i = 0; i < layerRoads.Data.Items.Count(); i++)
            {
                MapItemAttributeCollection mt = new MapItemAttributeCollection();


                // mt = roadGeomItemStorage.Items[d].Attributes as MapItemAttributeCollection;// roadGeomItemStorage.Items.Select(c => c.Attributes).FirstOrDefault() as MapItemAttributeCollection;

                mt = layerRoads.Data.GetItem(i).Attributes as MapItemAttributeCollection;
              
                
                
                if (mt != null)
                {
                    string value = (string)mt["RoadClassification"].Value;
                    switch (value)
                    {
                        case "Class A-Trunk Road":
                            layerRoads.Data.Items.ElementAt(i).Stroke = Color.Blue;
                            break;

                        case "Class B-Link Road":
                            layerRoads.Data.Items.ElementAt(i).Stroke = Color.Green;
                            break;

                        case "Class C-Main Access Road":
                            layerRoads.Data.Items.ElementAt(i).Stroke = Color.Cyan;
                            break;

                        case "Class D-Collector Road":
                            layerRoads.Data.Items.ElementAt(i).Stroke = Color.DarkRed;
                            break;

                        case "Class E-Feeder Road":
                            layerRoads.Data.Items.ElementAt(i).Stroke = Color.Purple;
                            break;
                    }
                    

                }
                i++;
            }




        }
        //ColorListLegend populationLegend;

        //ColorListLegend PopulationLegend
        //{
        //    get
        //    {
        //        if (populationLegend == null)
        //            populationLegend = CreatePopulationLegend();
        //        return populationLegend;
        //    }
        //}

        //ColorListLegend CreatePopulationLegend()
        //{
        //    ColorListLegend legend = new ColorListLegend();
        //   // legend.RangeStopsFormat = "0,,M";
        //    legend.Header = "";
        //    legend.Description = "";
        //    legend.Layer = layerRoads;
        //    return legend;
        //}

        private void MapMode_CheckedChanged(object sender, ItemClickEventArgs e)
        {

                if (chkSurfaceType.Checked)
                {
                SurfaceTypeColorizer();
                
                }
                else if ( chkRoadClass.Checked )
                {
                RoadClassColorizer();
                
                }
                
               
           

        }

      

        private void toolTipController1_BeforeShow(object sender, DevExpress.Utils.ToolTipControllerShowEventArgs e)
        {
            //  MapPolyline customElement = (MapPolyline)(e.SelectedObject);

            var x = 1;
            if (e.SelectedObject.GetType().Name =="MapPolyline")
            {
                MapPolyline customElement =(MapPolyline)e.SelectedObject;
            

            ToolTipTitleItem titleItem1 = new ToolTipTitleItem() { Text ="Origin-Destination: " + customElement.Attributes["RoadName"].Value.ToString() };
            titleItem1.Appearance.ForeColor = SystemColors.GrayText;
            titleItem1.Appearance.Font = ToolTipFont;

            SuperToolTip superToolTip = new SuperToolTip();
            superToolTip.Items.Add(titleItem1);

            ToolTipSeparatorItem sepItem = new ToolTipSeparatorItem();
            superToolTip.Items.Add(sepItem);

            ToolTipItem textItem = new ToolTipItem() { Text = e.ToolTip };
            superToolTip.Items.Add(textItem);
            e.SuperTip = superToolTip;
            }

            if (e.SelectedObject.GetType().Name == "MapPath")
            {
                MapPath customElement = (MapPath)e.SelectedObject;


                ToolTipTitleItem titleItem1 = new ToolTipTitleItem() { Text = "Woreda: " + customElement.Attributes["Woreda"].Value.ToString() };
                titleItem1.Appearance.ForeColor = SystemColors.GrayText;
                titleItem1.Appearance.Font = ToolTipFont;

                SuperToolTip superToolTip = new SuperToolTip();
                superToolTip.Items.Add(titleItem1);

                ToolTipSeparatorItem sepItem = new ToolTipSeparatorItem();
                superToolTip.Items.Add(sepItem);

                ToolTipItem textItem = new ToolTipItem() { Text = e.ToolTip };
                superToolTip.Items.Add(textItem);
                e.SuperTip = superToolTip;
            }
        }






        //private void mapControl1_DrawMapItem(object sender, DrawMapItemEventArgs e)
        //{
        //    if (e.Layer.Name == "WoredaLayer") return;

        //    MapPolyline polyline = e.Item as MapPolyline;
        //    MapItemAttributeCollection mt = e.Item.Attributes as MapItemAttributeCollection;

        //    if (mt != null)
        //    {




        //        if ((string)mt["SurfaceType"].Value == "Gravel")
        //        {
        //            e.Item.Stroke = Color.Green;
        //          //  e.Item.StrokeWidth = 3;
        //        }
        //        if ((string)mt[0].Value == "Earth")
        //        {
        //            e.Item.Stroke = Color.Red;
        //            e.Item.StrokeWidth = 3;
        //        }

        //    }

        //    //if (polyline != null)
        //    //{
        //    //    e.Item.Stroke = Color.Blue;
        //    //    e.Item.StrokeWidth = 3;
        //    //}
        //}





    }
}