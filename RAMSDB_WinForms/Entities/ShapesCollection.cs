//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 4/15/2020 1:44:59 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace RAMSDBModel
{
    [System.ComponentModel.DataAnnotations.Schema.Table("ShapesCollection", Schema = "dbo")]
    public partial class ShapesCollection : INotifyPropertyChanged
    {

        public ShapesCollection()
        {
            this.AdminBoundaries = new ObservableListSource<AdminBoundary>();
            this.RoadsGISDatas = new ObservableListSource<RoadsGISData>();
            OnCreated();
        }

        #region Properties

        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 0)]
        [System.ComponentModel.DataAnnotations.Schema.DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)]
        public virtual int ShapeID
        {
            get
            {
                return _ShapeID;
            }
            set
            {
                if (_ShapeID != value)
                {
                    _ShapeID = value;
                    OnPropertyChanged("ShapeID");
                }
            }
        }
        private int _ShapeID;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "nvarchar", Order = 1)]
        public virtual string ShapeType
        {
            get
            {
                return _ShapeType;
            }
            set
            {
                if (_ShapeType != value)
                {
                    _ShapeType = value;
                    OnPropertyChanged("ShapeType");
                }
            }
        }
        private string _ShapeType;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "nvarchar", Order = 2)]
        public virtual string ShapeName
        {
            get
            {
                return _ShapeName;
            }
            set
            {
                if (_ShapeName != value)
                {
                    _ShapeName = value;
                    OnPropertyChanged("ShapeName");
                }
            }
        }
        private string _ShapeName;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "bit", Order = 3)]
        public virtual bool IsDefault
        {
            get
            {
                return _IsDefault;
            }
            set
            {
                if (_IsDefault != value)
                {
                    _IsDefault = value;
                    OnPropertyChanged("IsDefault");
                }
            }
        }
        private bool _IsDefault;

        #endregion

        #region Navigation Properties
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("ShapesCollection")]
        public virtual ObservableListSource<AdminBoundary> AdminBoundaries
        {
            get;
            set;
        }
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("ShapesCollection")]
        public virtual ObservableListSource<RoadsGISData> RoadsGISDatas
        {
            get;
            set;
        }

        #endregion

        #region Extensibility Method Definitions
        partial void OnCreated();
        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
