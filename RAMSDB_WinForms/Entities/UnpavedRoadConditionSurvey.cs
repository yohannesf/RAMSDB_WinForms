//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 4/15/2020 1:44:59 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace RAMSDBModel
{
    [System.ComponentModel.DataAnnotations.Schema.Table("UnpavedRoadConditionSurvey", Schema = "dbo")]
    public partial class UnpavedRoadConditionSurvey : INotifyPropertyChanged
    {

        public UnpavedRoadConditionSurvey()
        {
            this.TentativeRoadMaintenancePlans = new ObservableListSource<TentativeRoadMaintenancePlan>();
            OnCreated();
        }

        #region Properties

        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 0)]
        [System.ComponentModel.DataAnnotations.Schema.DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)]
        public virtual int RCSID
        {
            get
            {
                return _RCSID;
            }
            set
            {
                if (_RCSID != value)
                {
                    _RCSID = value;
                    OnPropertyChanged("RCSID");
                }
            }
        }
        private int _RCSID;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "smallint", Order = 1)]
        [System.ComponentModel.DataAnnotations.Schema.DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)]
        public virtual short RCSYear
        {
            get
            {
                return _RCSYear;
            }
            set
            {
                if (_RCSYear != value)
                {
                    _RCSYear = value;
                    OnPropertyChanged("RCSYear");
                }
            }
        }
        private short _RCSYear;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 2)]
        public virtual int RoadID
        {
            get
            {
                return _RoadID;
            }
            set
            {
                if (_RoadID != value)
                {
                    _RoadID = value;
                    OnPropertyChanged("RoadID");
                }
            }
        }
        private int _RoadID;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 3)]
        public virtual int UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    _UserID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _UserID;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 4)]
        public virtual string RoadSectionNo
        {
            get
            {
                return _RoadSectionNo;
            }
            set
            {
                if (_RoadSectionNo != value)
                {
                    _RoadSectionNo = value;
                    OnPropertyChanged("RoadSectionNo");
                }
            }
        }
        private string _RoadSectionNo;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "numeric", Order = 5)]
        public virtual decimal? SectionChainageStartKM
        {
            get
            {
                return _SectionChainageStartKM;
            }
            set
            {
                if (_SectionChainageStartKM != value)
                {
                    _SectionChainageStartKM = value;
                    OnPropertyChanged("SectionChainageStartKM");
                }
            }
        }
        private decimal? _SectionChainageStartKM;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "numeric", Order = 6)]
        public virtual decimal? SectionChainageEndKM
        {
            get
            {
                return _SectionChainageEndKM;
            }
            set
            {
                if (_SectionChainageEndKM != value)
                {
                    _SectionChainageEndKM = value;
                    OnPropertyChanged("SectionChainageEndKM");
                }
            }
        }
        private decimal? _SectionChainageEndKM;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "numeric", Order = 7)]
        public virtual decimal? SectionLengthKM
        {
            get
            {
                return _SectionLengthKM;
            }
            set
            {
                if (_SectionLengthKM != value)
                {
                    _SectionLengthKM = value;
                    OnPropertyChanged("SectionLengthKM");
                }
            }
        }
        private decimal? _SectionLengthKM;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 8)]
        public virtual int SurfaceType
        {
            get
            {
                return _SurfaceType;
            }
            set
            {
                if (_SurfaceType != value)
                {
                    _SurfaceType = value;
                    OnPropertyChanged("SurfaceType");
                }
            }
        }
        private int _SurfaceType;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "numeric", Order = 9)]
        public virtual decimal? XBegin
        {
            get
            {
                return _XBegin;
            }
            set
            {
                if (_XBegin != value)
                {
                    _XBegin = value;
                    OnPropertyChanged("XBegin");
                }
            }
        }
        private decimal? _XBegin;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "numeric", Order = 10)]
        public virtual decimal? YBegin
        {
            get
            {
                return _YBegin;
            }
            set
            {
                if (_YBegin != value)
                {
                    _YBegin = value;
                    OnPropertyChanged("YBegin");
                }
            }
        }
        private decimal? _YBegin;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "numeric", Order = 11)]
        public virtual decimal? XEnd
        {
            get
            {
                return _XEnd;
            }
            set
            {
                if (_XEnd != value)
                {
                    _XEnd = value;
                    OnPropertyChanged("XEnd");
                }
            }
        }
        private decimal? _XEnd;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "numeric", Order = 12)]
        public virtual decimal? YEnd
        {
            get
            {
                return _YEnd;
            }
            set
            {
                if (_YEnd != value)
                {
                    _YEnd = value;
                    OnPropertyChanged("YEnd");
                }
            }
        }
        private decimal? _YEnd;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 13)]
        public virtual string StartNodeID
        {
            get
            {
                return _StartNodeID;
            }
            set
            {
                if (_StartNodeID != value)
                {
                    _StartNodeID = value;
                    OnPropertyChanged("StartNodeID");
                }
            }
        }
        private string _StartNodeID;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 14)]
        public virtual string EndNodeID
        {
            get
            {
                return _EndNodeID;
            }
            set
            {
                if (_EndNodeID != value)
                {
                    _EndNodeID = value;
                    OnPropertyChanged("EndNodeID");
                }
            }
        }
        private string _EndNodeID;

        /// <summary>
        /// 1: Good	No water on the road during rain; no erosion or silt deposits; good roadside drainage
        /// 2: Fair	Some water on the road during rain; some erosion / scouring in roadside drains or drains half silted
        /// 3: Poor	Much water on the road during rain; severe erosion / scouring in roadside drains or drains fully silted
        /// 4: Bad	Non-existing / non-functioning drainage system
        /// </summary>
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 15)]
        public virtual int? DrainageConditionLeft
        {
            get
            {
                return _DrainageConditionLeft;
            }
            set
            {
                if (_DrainageConditionLeft != value)
                {
                    _DrainageConditionLeft = value;
                    OnPropertyChanged("DrainageConditionLeft");
                }
            }
        }
        private int? _DrainageConditionLeft;

        /// <summary>
        /// 1: Good	No water on the road during rain; no erosion or silt deposits; good roadside drainage
        /// 2: Fair	Some water on the road during rain; some erosion / scouring in roadside drains or drains half silted
        /// 3: Poor	Much water on the road during rain; severe erosion / scouring in roadside drains or drains fully silted
        /// 4: Bad	Non-existing / non-functioning drainage system
        /// </summary>
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 16)]
        public virtual int? DrainageConditionRight
        {
            get
            {
                return _DrainageConditionRight;
            }
            set
            {
                if (_DrainageConditionRight != value)
                {
                    _DrainageConditionRight = value;
                    OnPropertyChanged("DrainageConditionRight");
                }
            }
        }
        private int? _DrainageConditionRight;

        /// <summary>
        /// 1: Good	Good shape, allowing easy runoff from the road surface into the roadside drains; shoulder not eroded
        /// 2: Fair	Uneven shape, but allowing most water to run off the road surface into the roadside drains; some erosion of shoulder
        /// 3: Poor	Poor shape and seriously restricts water to run off the road surface into the roadside drains; severe erosion of shoulder
        /// 4: Bad	Non-functioning or non-existing
        /// </summary>
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 17)]
        public virtual int? ShoulderConditionLeft
        {
            get
            {
                return _ShoulderConditionLeft;
            }
            set
            {
                if (_ShoulderConditionLeft != value)
                {
                    _ShoulderConditionLeft = value;
                    OnPropertyChanged("ShoulderConditionLeft");
                }
            }
        }
        private int? _ShoulderConditionLeft;

        /// <summary>
        /// 1: Good	Good shape, allowing easy runoff from the road surface into the roadside drains; shoulder not eroded
        /// 2: Fair	Uneven shape, but allowing most water to run off the road surface into the roadside drains; some erosion of shoulder
        /// 3: Poor	Poor shape and seriously restricts water to run off the road surface into the roadside drains; severe erosion of shoulder
        /// 4: Bad	Non-functioning or non-existing
        /// </summary>
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 18)]
        public virtual int? ShoulderConditionRight
        {
            get
            {
                return _ShoulderConditionRight;
            }
            set
            {
                if (_ShoulderConditionRight != value)
                {
                    _ShoulderConditionRight = value;
                    OnPropertyChanged("ShoulderConditionRight");
                }
            }
        }
        private int? _ShoulderConditionRight;

        /// <summary>
        /// 1: Good	Good shape, smooth running surface (roughness &lt; 8 m/km )
        /// 2: Fair	Reasonable shape, corrugations and potholes up to 10 cm deep (roughness 9-14 m/km)
        /// 3: Poor	Poor shape, frequent depressions, rutting and potholes &gt; 10 cm deep (roughness 15 – 18 m/km)
        /// 4: Bad	Bad shape, deep depressions and potholes, serious rutting, 4WD dry weather only (roughness &gt; 18 m/km)
        /// </summary>
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 19)]
        public virtual int? SurfaceCondition
        {
            get
            {
                return _SurfaceCondition;
            }
            set
            {
                if (_SurfaceCondition != value)
                {
                    _SurfaceCondition = value;
                    OnPropertyChanged("SurfaceCondition");
                }
            }
        }
        private int? _SurfaceCondition;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "bit", Order = 20)]
        public virtual bool? Bottleneck
        {
            get
            {
                return _Bottleneck;
            }
            set
            {
                if (_Bottleneck != value)
                {
                    _Bottleneck = value;
                    OnPropertyChanged("Bottleneck");
                }
            }
        }
        private bool? _Bottleneck;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "numeric", Order = 21)]
        public virtual decimal? BottleneckSize
        {
            get
            {
                return _BottleneckSize;
            }
            set
            {
                if (_BottleneckSize != value)
                {
                    _BottleneckSize = value;
                    OnPropertyChanged("BottleneckSize");
                }
            }
        }
        private decimal? _BottleneckSize;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "date", Order = 22)]
        public virtual global::System.DateTime? DateOfAssessment
        {
            get
            {
                return _DateOfAssessment;
            }
            set
            {
                if (_DateOfAssessment != value)
                {
                    _DateOfAssessment = value;
                    OnPropertyChanged("DateOfAssessment");
                }
            }
        }
        private global::System.DateTime? _DateOfAssessment;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 23)]
        public virtual string AssessedBy
        {
            get
            {
                return _AssessedBy;
            }
            set
            {
                if (_AssessedBy != value)
                {
                    _AssessedBy = value;
                    OnPropertyChanged("AssessedBy");
                }
            }
        }
        private string _AssessedBy;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "text", Order = 24)]
        public virtual string Comments
        {
            get
            {
                return _Comments;
            }
            set
            {
                if (_Comments != value)
                {
                    _Comments = value;
                    OnPropertyChanged("Comments");
                }
            }
        }
        private string _Comments;

        #endregion

        #region Navigation Properties
        [System.ComponentModel.DataAnnotations.Schema.ForeignKey("RoadID")]
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("UnpavedRoadConditionSurveys")]
        public virtual RoadsGISData RoadsGISData
        {
            get
            {
                return _RoadsGISData;
            }
            set
            {
                if (_RoadsGISData != value)
                {
                    _RoadsGISData = value;
                    OnPropertyChanged("RoadsGISData");
                }
            }
        }
        private RoadsGISData _RoadsGISData;
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("UnpavedRoadConditionSurveys")]
        public virtual RoadsPerUser RoadsPerUser
        {
            get
            {
                return _RoadsPerUser;
            }
            set
            {
                if (_RoadsPerUser != value)
                {
                    _RoadsPerUser = value;
                    OnPropertyChanged("RoadsPerUser");
                }
            }
        }
        private RoadsPerUser _RoadsPerUser;
        [System.ComponentModel.DataAnnotations.Schema.ForeignKey("SurfaceType")]
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("UnpavedRoadConditionSurveys")]
        public virtual RoadSurfaceType RoadSurfaceType
        {
            get
            {
                return _RoadSurfaceType;
            }
            set
            {
                if (_RoadSurfaceType != value)
                {
                    _RoadSurfaceType = value;
                    OnPropertyChanged("RoadSurfaceType");
                }
            }
        }
        private RoadSurfaceType _RoadSurfaceType;
        [System.ComponentModel.DataAnnotations.Schema.ForeignKey("DrainageConditionLeft")]
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("UnpavedRoadConditionSurveys_DrainageConditionLeft")]
        public virtual Condition Condition_DrainageConditionLeft
        {
            get
            {
                return _Condition_DrainageConditionLeft;
            }
            set
            {
                if (_Condition_DrainageConditionLeft != value)
                {
                    _Condition_DrainageConditionLeft = value;
                    OnPropertyChanged("Condition_DrainageConditionLeft");
                }
            }
        }
        private Condition _Condition_DrainageConditionLeft;
        [System.ComponentModel.DataAnnotations.Schema.ForeignKey("DrainageConditionRight")]
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("UnpavedRoadConditionSurveys_DrainageConditionRight")]
        public virtual Condition Condition_DrainageConditionRight
        {
            get
            {
                return _Condition_DrainageConditionRight;
            }
            set
            {
                if (_Condition_DrainageConditionRight != value)
                {
                    _Condition_DrainageConditionRight = value;
                    OnPropertyChanged("Condition_DrainageConditionRight");
                }
            }
        }
        private Condition _Condition_DrainageConditionRight;
        [System.ComponentModel.DataAnnotations.Schema.ForeignKey("ShoulderConditionLeft")]
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("UnpavedRoadConditionSurveys_ShoulderConditionLeft")]
        public virtual Condition Condition_ShoulderConditionLeft
        {
            get
            {
                return _Condition_ShoulderConditionLeft;
            }
            set
            {
                if (_Condition_ShoulderConditionLeft != value)
                {
                    _Condition_ShoulderConditionLeft = value;
                    OnPropertyChanged("Condition_ShoulderConditionLeft");
                }
            }
        }
        private Condition _Condition_ShoulderConditionLeft;
        [System.ComponentModel.DataAnnotations.Schema.ForeignKey("ShoulderConditionRight")]
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("UnpavedRoadConditionSurveys_ShoulderConditionRight")]
        public virtual Condition Condition_ShoulderConditionRight
        {
            get
            {
                return _Condition_ShoulderConditionRight;
            }
            set
            {
                if (_Condition_ShoulderConditionRight != value)
                {
                    _Condition_ShoulderConditionRight = value;
                    OnPropertyChanged("Condition_ShoulderConditionRight");
                }
            }
        }
        private Condition _Condition_ShoulderConditionRight;
        [System.ComponentModel.DataAnnotations.Schema.ForeignKey("SurfaceCondition")]
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("UnpavedRoadConditionSurveys_SurfaceCondition")]
        public virtual Condition Condition_SurfaceCondition
        {
            get
            {
                return _Condition_SurfaceCondition;
            }
            set
            {
                if (_Condition_SurfaceCondition != value)
                {
                    _Condition_SurfaceCondition = value;
                    OnPropertyChanged("Condition_SurfaceCondition");
                }
            }
        }
        private Condition _Condition_SurfaceCondition;
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("UnpavedRoadConditionSurvey")]
        public virtual ObservableListSource<TentativeRoadMaintenancePlan> TentativeRoadMaintenancePlans
        {
            get;
            set;
        }

        #endregion

        #region Extensibility Method Definitions
        partial void OnCreated();
        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
