//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 4/15/2020 1:44:59 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace RAMSDBModel
{
    [System.ComponentModel.DataAnnotations.Schema.Table("TentativeRoadMaintenancePlan", Schema = "dbo")]
    public partial class TentativeRoadMaintenancePlan : INotifyPropertyChanged
    {

        public TentativeRoadMaintenancePlan()
        {
            OnCreated();
        }

        #region Properties

        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 0)]
        [System.ComponentModel.DataAnnotations.Schema.DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)]
        public virtual int TentRMaintPlan
        {
            get
            {
                return _TentRMaintPlan;
            }
            set
            {
                if (_TentRMaintPlan != value)
                {
                    _TentRMaintPlan = value;
                    OnPropertyChanged("TentRMaintPlan");
                }
            }
        }
        private int _TentRMaintPlan;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 1)]
        public virtual int RCSID
        {
            get
            {
                return _RCSID;
            }
            set
            {
                if (_RCSID != value)
                {
                    _RCSID = value;
                    OnPropertyChanged("RCSID");
                }
            }
        }
        private int _RCSID;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 2)]
        public virtual int RoadID
        {
            get
            {
                return _RoadID;
            }
            set
            {
                if (_RoadID != value)
                {
                    _RoadID = value;
                    OnPropertyChanged("RoadID");
                }
            }
        }
        private int _RoadID;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "smallint", Order = 3)]
        public virtual short Year
        {
            get
            {
                return _Year;
            }
            set
            {
                if (_Year != value)
                {
                    _Year = value;
                    OnPropertyChanged("Year");
                }
            }
        }
        private short _Year;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 4)]
        public virtual int CatWorkID
        {
            get
            {
                return _CatWorkID;
            }
            set
            {
                if (_CatWorkID != value)
                {
                    _CatWorkID = value;
                    OnPropertyChanged("CatWorkID");
                }
            }
        }
        private int _CatWorkID;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "numeric", Order = 5)]
        public virtual decimal Length
        {
            get
            {
                return _Length;
            }
            set
            {
                if (_Length != value)
                {
                    _Length = value;
                    OnPropertyChanged("Length");
                }
            }
        }
        private decimal _Length;

        #endregion

        #region Navigation Properties
        [System.ComponentModel.DataAnnotations.Schema.ForeignKey("CatWorkID")]
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("TentativeRoadMaintenancePlans")]
        public virtual CategoryofWork CategoryofWork
        {
            get
            {
                return _CategoryofWork;
            }
            set
            {
                if (_CategoryofWork != value)
                {
                    _CategoryofWork = value;
                    OnPropertyChanged("CategoryofWork");
                }
            }
        }
        private CategoryofWork _CategoryofWork;
        [System.ComponentModel.DataAnnotations.Schema.ForeignKey("RoadID")]
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("TentativeRoadMaintenancePlans")]
        public virtual RoadsGISData RoadsGISData
        {
            get
            {
                return _RoadsGISData;
            }
            set
            {
                if (_RoadsGISData != value)
                {
                    _RoadsGISData = value;
                    OnPropertyChanged("RoadsGISData");
                }
            }
        }
        private RoadsGISData _RoadsGISData;
        [System.ComponentModel.DataAnnotations.Schema.ForeignKey("RCSID")]
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("TentativeRoadMaintenancePlans")]
        public virtual UnpavedRoadConditionSurvey UnpavedRoadConditionSurvey
        {
            get
            {
                return _UnpavedRoadConditionSurvey;
            }
            set
            {
                if (_UnpavedRoadConditionSurvey != value)
                {
                    _UnpavedRoadConditionSurvey = value;
                    OnPropertyChanged("UnpavedRoadConditionSurvey");
                }
            }
        }
        private UnpavedRoadConditionSurvey _UnpavedRoadConditionSurvey;

        #endregion

        #region Extensibility Method Definitions
        partial void OnCreated();
        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
